using Datacute.IncrementalGeneratorExtensions;

namespace Datacute.AdditionalTextConstantGenerator
{
    public class CodeGenerator : SourceTextGeneratorBase<AttributeData>
    {
        public CodeGenerator(in AttributeContextAndData<AttributeData> contextAndData,
            string additionalTextSearchPath,
            in EquatableImmutableArray<AdditionalTextContent> additionalTextContents,
            in GeneratorOptions options,
            in CancellationToken cancellationToken)
            : base(contextAndData, cancellationToken) 
        {
            _contextData = contextAndData.AttributeData;

            _additionalTextSearchPath = additionalTextSearchPath;
            _additionalTextContents = additionalTextContents;
            _options = options;
            _stringConstantNames = new Dictionary<string, AdditionalTextContent>();
        }

        private readonly AttributeData _contextData;
        private readonly string _additionalTextSearchPath;
        private readonly EquatableImmutableArray<AdditionalTextContent> _additionalTextContents;
        private readonly GeneratorOptions _options;
        
        private readonly Dictionary<string, AdditionalTextContent> _stringConstantNames;

        protected override void PrepareForGeneration()
        {
            Token.ThrowIfCancellationRequested(102);
            Buffer.Clear();

            _stringConstantNames.Clear();
            foreach (var text in _additionalTextContents)
            {
                Token.ThrowIfCancellationRequested(3);
                var additionalTextFilePath = text.Path;

                var stringConstantName = additionalTextFilePath.GetStringConstantName(Context.Name);
                RecordStringConstantNameForAdditionalText(stringConstantName, text);
            }
        }

        private void RecordStringConstantNameForAdditionalText(string stringConstantName, AdditionalTextContent text)
        {
            // finding "Classname.txt" (converted to "Classname_txt")
            // before an actual "Classname_txt.txt"
            // should result in "Classname.txt" being adjusted further
            if (_stringConstantNames.TryGetValue(stringConstantName, out var existingText))
            {
                if (existingText.Path.Length >= text.Path.Length)
                {
                    RecordStringConstantNameForAdditionalText(stringConstantName + "_", text);
                }
                else
                {
                    _stringConstantNames[stringConstantName] = text;
                    RecordStringConstantNameForAdditionalText(stringConstantName + "_", existingText);
                }
            }
            else
            {
                _stringConstantNames.Add(stringConstantName, text);
            }
        }

        protected override string AutoGeneratedComment => Templates.AutoGeneratedComment;
        
        protected override void AppendDocComments()
        {
            if (_options.IsDesignTimeBuild) return;

            var path = _additionalTextSearchPath.Substring(_options.ProjectDir.Length)
                .Replace(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);
            Buffer.AppendFormatLines(Templates.ClassDocComments, path, _contextData.ExtensionArg, 
                $"search path: {_additionalTextSearchPath} path: {path}");
        }

        protected override void AppendCustomMembers()
        {
            foreach (var kvp in _stringConstantNames.OrderBy(kvp => kvp.Value.Path))
            {
                Token.ThrowIfCancellationRequested(6);

                var stringConstantName = kvp.Key;
                var text = kvp.Value;
                var additionalTextFilePath = text.Path;

                if (_options.IsDesignTimeBuild)
                {
                    Buffer.AppendLine(string.Format(Templates.DesignTimeStringConstantTemplate, stringConstantName));
                }
                else
                {
                    var docCommentCode = text.DocCommentCode;
                    if (docCommentCode is null)
                    {
                        continue;
                    }

                    var additionalTextFileName = additionalTextFilePath.GetFileName();

                    Buffer.AppendFormatLines(Templates.StringConstantDocCommentTemplate,
                        additionalTextFileName,
                        docCommentCode);

                    Buffer.AppendLine(string.Format(Templates.StringConstantTemplate,
                        stringConstantName,
                        text.TextContent));
                }
            }
        }

        protected override void AppendDiagnosticLogs()
        {
            if (_contextData.OutputDiagnosticTraceLog)
            {
                Buffer.AppendLine();
                Buffer.Direct.AppendDiagnosticsComment(TrackingNameDescriptions.EventNameMap);
            }
        }
    }
}